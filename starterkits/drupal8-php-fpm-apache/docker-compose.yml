# Drupal 8 StarterKit.
version: '3.5'

volumes:
  app:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}
  mysql-data:
  # Converting core and vendor to the named volume will improve the speed meanwhile debugger will fail.
  # core:               # drupal core
  # vendor:             # php modules
  files:
networks:
  default:
    name: vega-${PROJECT_NAME}

x-app-volumes: &app-volumes
    - files:${DOC_ROOT}/sites/default/files:delegated
    # - ./:/app:cached
    # - core:/app/web/core
    # - vendor:/app/vendor

    # Add any custom configuration files here

x-cli-volumes: &cli-volumes
    - ./:/app:delegated

x-app-envsfile: &app-envsfile .env

x-app-networks: &app-networks
  - default

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.2.0
    container_name: ${PROJECT_NAME}_proxy
    env_file:  *app-envsfile
    # Enables the web UI and tells Traefik to listen to docker
    command:
      #--configFile=proxy.yml
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --api.insecure=true
      --providers.docker=true
      --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      --certificatesresolvers.leresolver.acme.email=vega@vega.com
      --certificatesresolvers.leresolver.acme.storage=/acme.json
      --certificatesresolvers.leresolver.acme.tlschallenge=true

    labels:
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.docker.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/" # user/password

      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

    ports:
      - ${APPLICATION_PORT}:80
      - "443:443"
      - "8000:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json

  # Change mounted named volumes user from root(default) to continua.
  chown:
    image: "srijanlabs/php-cli:${PHP_VERSION}-buster"
    container_name: ${PROJECT_NAME}_chown
    entrypoint: [ "bash", "-c"]
    command:
      - "chown -R continua:continua /app"
    user: root
    depends_on:
      - cli
    volumes: *app-volumes

  cli:
    image: "srijanlabs/php-cli:${PHP_VERSION}-buster"
    container_name: ${PROJECT_NAME}_cli
    command: ["composer", "install", "--no-dev", "--prefer-dist", "--no-progress", "--no-suggest", "--no-interaction", "--optimize-autoloader"]
    user: root
    working_dir: /app
    volumes:  *cli-volumes
    networks: *app-networks
    env_file:  *app-envsfile
    environment:
      - COMPOSER_MEMORY_LIMIT=-1 # Prevent composer from running out of memory

  drupal:
    image: srijanlabs/php-fpm-apache:${PHP_VERSION}-buster-local
    build:
      dockerfile: Dockerfile.dev
      context: .
      args:
        PHP_VERSION: ${PHP_VERSION}
    container_name: ${PROJECT_NAME}_drupal
    depends_on:
      - mysql
    # ports:
    #   - ${APPLICATION_PORT}:8080
    volumes: *app-volumes
    networks: *app-networks
    env_file:  *app-envsfile
    labels:
      - traefik.http.routers.drupal.rule=Host(`${PROJECT_NAME}.vega.localhost`)
      - traefik.http.routers.drupal.entrypoints=websecure
      - traefik.http.routers.drupal.tls=true
      - traefik.http.routers.drupal.tls.certresolver=leresolver

  mysql:
    image: mysql:5.7
    container_name: ${PROJECT_NAME}_mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    networks: *app-networks

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  # blackfire:
  #   image: blackfire/blackfire
  #   container_name: ${PROJECT_NAME}_blackfire
  #   ports:
  #     - "8707:8707"
  #   environment:
  #     # Exposes BLACKFIRE_SERVER_* environment variables from the host
  #     BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
  #     BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
  #   networks: *app-networks
